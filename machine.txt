capitalized words denote sets; lowercase are literals

a ∈ Addr
ρ ∈ Env (finite function: ID → Value)
σ ∈ Store (finite function: Addr → Value)
x ∈ Identifier

v ∈ Value
  ::= Int
    | String
    | null
    | #t
    | #f
    | pair v v
    | closure ρ x e
    | Primitive

e ∈ Expr
  ::= Int
    | String
    | #t
    | #f
    | x
    | (lambda x e)
    | (e e)
    | (let x e e)
    | (letrec x x e e)
    | (and e e)
    | (or e e)

Prim ::=
    Add
    AddC
    Sub
    SubC
    Equal
    EqualC
    NullP

κ ∈ Continuation
  ::= halt-k
    | rator-k ρ e κ
    | rand-k ρ v κ
    | let-k ρ x e κ
    | and-k ρ e
    | or-k ρ e

Expr-Config ::= <e, ρ, κ>
Value-Config ::= <v, κ>

<v, ρ, κ> → <v, κ>
<x, ρ, κ> → <ρ(x), κ>
<(lambda x e), ρ, κ> → <Closure ρ x e, κ>
<(e1 e2), ρ, κ> → <e1, ρ, rator-k ρ e2 κ>
<(let x e1 e2), ρ, κ> → <e1, ρ, let-k ρ x e2 κ>
<(letrec x1 x2 e1 e2, ρ, κ> → <e2, ρ2, κ>
  where ρ2 = extend(ρ, x1, Closure ρ2 x2 e1)
<(and e1 e2), ρ, κ> → <e1, ρ, and-k ρ e2>
<(or e1 e2), ρ, κ> → <e1, ρ, or-k ρ e2>

<v, rator-k ρ e κ> → <e, ρ, rand-k ρ v κ>
<v1, rand-k ρ v2 κ> → <apply(v2, v1), κ>
<v, let-k ρ x e κ> → <e, extend(ρ, x, v), κ>
<#f, and-k ρ e κ> → <#f, κ>
<v, and-k ρ e κ> → <e, ρ, κ>
<#f, or-k ρ e κ> → <e, ρ, κ>
<v, or-k ρ e κ> → <v, κ>

======================================================================

v ∈ Value
  ::= Real
    | String
    | Symbol
    | null
    | Boolean
    | void-value
    | pair v v
    | Const
    | closure Env <x ...> e
    | Primitive
    | κ
    | undefined

e ∈ Expr
e ::= Real
    | String
    | (quote Symbol)
    | Boolean
    | x
    | (lambda (x ...) e)
    | (let ([x e] ...) e)
    | (letrec ([x e] ...) e)
    | (let/cc x e)
    | (set! x e)
    | (if e e e)
    | (and e ...)
    | (or e ...)
    | (begin e ...)
    | (e ...+)

Initial environment establishes bindings for null, void (the function),
call/cc.

κ ∈ Continuation
  ::= halt-k
    | letrec-k ρ x <x ...> <e ...> e κ
        # evaluating the initializer for a letrec-bound variable
        #   1: environment for evaluating remaining rhss
        #   2: identifier whose initializer we're currently evaluating
        #   3: remaining identifiers
        #   4: remaining rhss
        #   5: body
        #   6: ancestor continuation
    | set!-k a κ
        # evaluating rhs of a set!
    | if-k ρ e e κ
        # evaluating condition of if
        # 2: consequent
        # 3: alternative
    | and-k ρ <e ...> κ
        # evaluating subexpr of and; sequence is remaining exprs
    | or-k ρ <e ...> κ
        # evaluating subexpr of or; sequence is remaining exprs
    | begin-k ρ <e ...> κ
        # evaluting subexpr of begin; sequence is remaining exprs
    | rator-k ρ <e ...> κ
        # evaluating 1st subexpr of an application
    | rand-k ρ Function <v ...> <e ...> κ
        # evaluating later subexpr of an application
        # Function is function to be applied
        # values are arguments evaluated so far, in *reverse* order!
        # exprs are arg exprs yet to evaluate, in source order

ExprConfig ::= <e, ρ, σ, κ>
ValueConfig ::= <v, σ, κ>

<n ρ σ κ> where n is a floating-point literal
   → <r σ κ>
<s ρ σ κ> where s is a string literal
   → <s σ κ>
<(quote s) ρ σ κ> where s is a symbol literal
   → <s σ κ>
<b ρ σ κ>  where b is a boolean literal
   → <b σ κ>
<x ρ σ κ> → <σ(ρ(x)) σ κ>
<(lambda (x ...) e) ρ σ κ>
